#!/bin/bash
#
#   /etc/rc.d/init.d/hangwatch
#
# hangwatch
# chkconfig: 2345 91 61
# description: Capture sysrq data

RETVAL=0
base_prog="hangwatch"
base_pidfile=${PIDFILE-/var/run/hangwatch/${base_prog}.pid}
base_lockfile=${LOCKFILE-/var/lock/subsys/${base_prog}}
RETVAL=0
HANGWATCH=/usr/sbin/hangwatch
LOCK_FILE=/var/lock/subsys/hangwatch
config=/etc/sysconfig/hangwatch

[ $(id -u) -eq 0 ] || {
  echo "Error: you are not root"
  exit 1
  } >&2

# Source function library.
. /etc/init.d/functions

# sysconfig
[ -r $config ] && . $config || {
  echo "Error: unable to read $config"
  exit 6
  } >&2

start_instance() {
    prog=${base_prog}$1
    pidfile=${base_pidfile}$1
    lockfile=${base_lockfile}$1

	case $1 in
	  "1" ) opts="$OPTIONS"   ;;
	  "2" ) opts="$OPTIONS_2" ;;
	  "3" ) opts="$OPTIONS_3" ;;
	  *   ) echo "Error: invalid instance" >&2; exit 1;;
	esac
    cmd="$prog $opts &> /dev/null &"
    echo -n $"Starting $prog: "
    daemon --pidfile ${pidfile} $cmd
    pidof $prog > ${pidfile}
    RETVAL=$?
    if [ -f ${pidfile} ]; then
        if [ "x$CPUS" != "x" ]; then
            affinity="$(/bin/taskset -p $CPUS $(cat ${pidfile}))"
            /usr/bin/logger -t ${prog} $affinity
            RETVAL=$?
        fi
        if [ "x$RTPRIO" != "x" ]; then
            /usr/bin/chrt -p -r $RTPRIO $(cat ${pidfile})
            RETVAL=$?
        fi
    fi
    echo
    [ $RETVAL -eq 0 ] && touch ${lockfile}

    return $RETVAL
}

stop_instance() {
    prog=${base_prog}$1
    pidfile=${base_pidfile}$1
    lockfile=${base_lockfile}$1

    if ! [ $1 -ge 1 -a $1 -le 3 ]; then
        echo "Error: invalid instance" >&2
        return 1
    fi

    echo -n $"Stopping $prog: "
    killproc -p ${pidfile} ${prog}
    RETVAL=$?
    echo
	[ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}

start() {
	[ "x$OPTIONS" != "x" ] && start_instance 1
    RETVAL=$?
	[ "x$OPTIONS_2" != "x" ] && start_instance 2
    RETVAL=$(( $? + RETVAL ))
	[ "x$OPTIONS_3" != "x" ] && start_instance 3
    RETVAL=$(( $? + RETVAL ))
    return $RETVAL
}   

stop() {
    [ -f ${base_pidfile}1 ] && stop_instance 1
    RETVAL=$?
    [ -f ${base_pidfile}2 ] && stop_instance 2
    RETVAL=$(( $? + RETVAL ))
    [ -f ${base_pidfile}3 ] && stop_instance 3
    RETVAL=$(( $? + RETVAL ))
    return $RETVAL
}

hangwatch_status() {
    [ -n "$OPTIONS" ] && status ${base_prog}1 || (exit 0)
    RETVAL=$?
    [ -n "$OPTIONS_2" ] && status ${base_prog}2 || (exit 0)
    RETVAL=$(( $? + RETVAL ))
    [ -n "$OPTIONS_3" ] && status ${base_prog}3 || (exit 0)
    RETVAL=$(( $? + RETVAL ))
    return $RETVAL
}

case "$1" in
    start)       start ;;
    stop)        stop ;;
    status)      hangwatch_status ;;
    restart)     stop; start ;;
    condrestart) stop; start;;
    *)
    	echo $"Usage: $0 {start|stop|status|restart|condrestart}"
    	RETVAL=3
esac
exit $RETVAL
